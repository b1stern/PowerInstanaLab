{"version":3,"sources":["webpack:///./src/pages/contributions.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-contributions-mdx-3f29e28a15d63e0a9756.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bstern/tivoli/Best_Practices/PowerInstanaLab/PowerInstanaLab/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {\n      /* Page title left out so it can be generated */\n    }\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this guide to contribute to the theme. We’ll show you how to get the\ndevelopment environment set up as quickly as possible so you can start\ncontributing.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Project setup</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Development</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Work in a branch</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Sass and CSS Modules</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">VS Code</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Test pages</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Publishing</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Project setup`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Go to\n`}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/carbon-design-system/gatsby-theme-carbon\"\n          }}>{`gatsby-theme-carbon`}</a>{`\nand click the `}<inlineCode parentName=\"p\">{`Fork`}</inlineCode>{` button in the top-right corner.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`After it’s finished, click on the `}<inlineCode parentName=\"p\">{`Clone or Download`}</inlineCode>{` button and copy the\ncontents.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your terminal, clone the repo into your directory of choice`}</p>\n      </li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git clone [PASTE_URL_HERE]\ncd gatsby-theme-carbon\n`}</code></pre>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`When you clone your forked repo the `}<inlineCode parentName=\"li\">{`origin`}</inlineCode>{` is set to your fork by default.\nYou’ll want to add a remote that points to the upstream repo.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\n`}</code></pre>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`In your terminal, verify that the remotes have been set`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git remote -v\n`}</code></pre>\n    <h2>{`Development`}</h2>\n    <p>{`We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://yarnpkg.com/lang/en/docs/install/\"\n      }}>{`yarn`}</a>{` and yarn workspaces to\ndevelop the Carbon Gatsby theme. This allows us to have a development\nenvironment that’s closely linked to the theme with minimal setup. Run\n`}<inlineCode parentName=\"p\">{`yarn install`}</inlineCode>{` to install all of the projects dependencies.`}</p>\n    <p>{`This project has two packages: the actual theme package (`}<inlineCode parentName=\"p\">{`gatsby-theme-carbon`}</inlineCode>{`)\nand the `}<inlineCode parentName=\"p\">{`example`}</inlineCode>{` package. The example package emulates a project which uses the\ntheme. Its only dependencies are Gatsby, React, and the adjacent theme package.\nThe `}<inlineCode parentName=\"p\">{`example`}</inlineCode>{` package also serves as the theme’s documentation and\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://gatsby-theme-carbon.now.sh\"\n      }}>{`website`}</a>{`; it’s deployed on every merge to\nmain.`}</p>\n    <p>{`New theme development will happen in the theme package while documentation and\ntesting of that change will occur through changes in the example directory.`}</p>\n    <h3>{`Development scripts`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn dev`}</inlineCode>{` – start the development environment`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn dev:clean`}</inlineCode>{` – clear cache and restart dev`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn format`}</inlineCode>{` – format your code with prettier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn lint`}</inlineCode>{` - check for errors in your javascript`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn test:prefix`}</inlineCode>{` – build and serve with a path prefix`}</li>\n    </ul>\n    <h2>{`Work in a branch`}</h2>\n    <p>{`You should always start a new project by pulling upstream changes into main and\nthen creating a new branch. This workflow ensures you don’t accidentally commit\nanything to your main branch and get stuck when trying to open a pull request.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git checkout main\ngit pull upstream main\ngit checkout -b my-branch-name\n`}</code></pre>\n    <h3>{`Commit messages`}</h3>\n    <p>{`For commit messages we use\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://gist.github.com/stephenparish/9941e89d80e2bc58a153#allowed-type\"\n      }}>{`Angular commit conventions`}</a>{`\nto dictate whether a commit is for a feature, fix, docs, etc. You need to prefix\nyour commits with one of the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`feat (feature)`}</li>\n      <li parentName=\"ul\">{`fix (bug fix)`}</li>\n      <li parentName=\"ul\">{`docs (documentation)`}</li>\n      <li parentName=\"ul\">{`style (formatting, missing semi colons, …)`}</li>\n      <li parentName=\"ul\">{`refactor`}</li>\n      <li parentName=\"ul\">{`test (when adding missing tests)`}</li>\n      <li parentName=\"ul\">{`chore (maintain)`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git commit -m \"chore: this is a test commit message\"\n`}</code></pre>\n    <h3>{`Opening a Pull request`}</h3>\n    <p>{`When you’re ready to open a pull request, push to your origin remote.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git push origin my-branch-name\n`}</code></pre>\n    <p>{`You’ll get a message in your terminal with a URL to open up a pull request in\nthe upstream repository. Navigate to that URL and be sure to give a detailed\nsummary of your pull request in the title and body section of the form.`}</p>\n    <h2>{`Sass and CSS Modules`}</h2>\n    <p>{`For internal theme components we use\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/documentation/syntax\"\n      }}>{`Sass`}</a>{` and\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/css-modules#css-modules\"\n      }}>{`CSS Modules`}</a>{`. This\nallows us to take advantage of the Carbon Design System resources while not\nworrying about className collisions. By default, each `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` file will be\nsupplied with all of the Carbon Sass\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/carbon-design-system/carbon/blob/main/packages/components/src/globals/scss/_vars.scss\"\n      }}>{`variables`}</a>{`:\ncolor, spacing, theme, and motion, as well as type and layout mixins, are\nimported automatically.`}</p>\n    <p>{`You should colocate your stylesheet with the component(s) that import it. If the\ncomponent is `}<inlineCode parentName=\"p\">{`TreeView`}</inlineCode>{` then the stylesheet should be `}<inlineCode parentName=\"p\">{`TreeView.module.scss`}</inlineCode>{`.\nAll contained within the `}<inlineCode parentName=\"p\">{`TreeView`}</inlineCode>{` directory.`}</p>\n    <h3>{`CSS Modules`}</h3>\n    <p>{`You don’t need to prefix your classes as CSS Modules will generate unique class\nnames for you. Import the class from the `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\",\n        \"metastring\": \"path=TreeView.module.scss\",\n        \"path\": \"TreeView.module.scss\"\n      }}>{`.treeView {\n  color: $text-01;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"path=TreeView.js\",\n        \"path\": \"TreeView.js\"\n      }}>{`import { treeView } from './style.css';\n\nconst TreeView = (props) => <div className={treeView} />;\n`}</code></pre>\n    <p>{`For conditionally applying class names, use the `}<inlineCode parentName=\"p\">{`classname`}</inlineCode>{` library. Note how\nwe’re using a\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://tylermcginnis.com/computed-property-names/\"\n      }}>{`computed property name`}</a>{` for\nthe property being based to `}<inlineCode parentName=\"p\">{`cx`}</inlineCode>{`. That’s because the className isn’t literally\n`}<inlineCode parentName=\"p\">{`\"long\"`}</inlineCode>{` it’s a value generated by CSS Modules and placed in the `}<inlineCode parentName=\"p\">{`long`}</inlineCode>{`\nvariable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"path=TreeView.js\",\n        \"path\": \"TreeView.js\"\n      }}>{`import cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = (props) => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = (props) => <div className={className} />;\n};\n`}</code></pre>\n    <p>{`If you need to target a global class not processed by CSS Modules, you can do so\nwith the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/css-modules#exceptions\"\n      }}>{`global selector`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`:global(.bx--grid) .codeBlock {\n  @include carbon--type-style('code-01');\n}\n`}</code></pre>\n    <h2>{`VS Code`}</h2>\n    <p>{`To get linting error feedback while writing javascript and SCSS in VS Code,\ninstall the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint\"\n      }}>{`stylelint`}</a>{`\nand\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\"\n      }}>{`ESlint`}</a>{`\nextensions. We use ESLint’s Prettier rules to format and lint all of our\nJavaScript in one pass. To get your code to format properly on save, add the\nfollowing to a `}<inlineCode parentName=\"p\">{`.vscode/settings.json`}</inlineCode>{` in the root of your project`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=.vscode/settings.json\",\n        \"path\": \".vscode/settings.json\"\n      }}>{`{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}\n`}</code></pre>\n    <p>{`To lint the entire project and get errors in your `}<inlineCode parentName=\"p\">{`Problems`}</inlineCode>{` tray, you can add\nthe following to a `}<inlineCode parentName=\"p\">{`.vscode/tasks.json`}</inlineCode>{` file in the root of your project. You\ncan run these tasks with `}<inlineCode parentName=\"p\">{`cmd+shift+d`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=.vscode/tasks.json\",\n        \"path\": \".vscode/tasks.json\"\n      }}>{`{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"\\${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\\\\\s+(\\\\\\\\d+):(\\\\\\\\d+)\\\\\\\\s+(✖|warning)\\\\\\\\s+(.*)\\\\\\\\s\\\\\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <h2>{`Test pages`}</h2>\n    <p>{`If you want to add examples of what you are working on or see changes you’ve\nmade, you can add an MDX file to `}<inlineCode parentName=\"p\">{`packages/src/pages/test`}</inlineCode>{` that will be visible\nat `}<inlineCode parentName=\"p\">{`(your-server-name)/test/(added-file)`}</inlineCode>{` during development. If you do add a\npage to the `}<inlineCode parentName=\"p\">{`/test`}</inlineCode>{` directory, update the below list with the file you added and\nits purpose to be included with your pull request.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/PowerInstanaLab/test/spacing-audit\"\n        }}><inlineCode parentName=\"a\">{`Spacing audit`}</inlineCode></a>{`: use this page to test spacing around\ncomponents when combined in common patterns.`}</li>\n    </ul>\n    <h2>{`Publishing`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Pull the latest from the main branch, usually by running\n`}<inlineCode parentName=\"li\">{`git pull upstream main`}</inlineCode>{` on your local machine.`}</li>\n      <li parentName=\"ol\">{`From the root of the package run `}<inlineCode parentName=\"li\">{`yarn release`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Follow the prompts accordingly.`}</li>\n      <li parentName=\"ol\">{`In the project’s\n`}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/carbon-design-system/gatsby-theme-carbon/releases\"\n        }}>{`release tab`}</a>{`,\nedit the new release to include a summary of new changes.`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}